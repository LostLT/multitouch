using UnityEngine;using System.Collections;public class TouchTap : MonoBehaviour {		private Touch touch;	private string[] touchInfoStrs = null;	private Vector2 areaCorner = new Vector2(25,50);	private Vector2 areaSize = new Vector2(100,100); 	private int hitFinger;		void Start () 	{	   touchInfoStrs = new string[100];	}	void Update () 	{		if (Input.touchCount != 0)		{			for (int i = 0; i < Input.touchCount; ++i)			{				//  Check for 				//   1 - touch coordinates, if touch hit defined TouchArea				//   2 - track finger Id _which hits the defined area_ from Began phase to Ended phase: 				//       [HIT] finger Id for both phases the same, 				//       [MOV] finger Id for Began phase _did not_ hits the defined area and for Ended phase - _did_. !NOTE: sometimes phase Bagan couldn't be recieved wich cause this case as well. 				//   3 - multiTap : last delta time, in case of multiTap shouldnt be more that 150ms				//   4 - multiTap : TODO: implement check for multitapRadius (tapZoneRadiusCM == 4mm) / multitapRadiusPixels = getScreenDPI() * tapZoneRadiusCM * cmToInch;				//				//  Getting touches with getter for every touch object within frame (Do not allocates temporary variables)				touch = Input.GetTouch(i); 								switch (touch.phase)				{					case TouchPhase.Began:					{						if (isHitTouchArea(touch, areaCorner, areaSize))							hitFinger = touch.fingerId; 						else							hitFinger = -1;						break;					}					case TouchPhase.Ended:					case TouchPhase.Canceled:					{						if (isHitTouchArea(touch, areaCorner, areaSize))						{				                if (hitFinger == touch.fingerId)    									touchInfoStrs[i] = "[HIT] touch fId #" + touch.fingerId + 									" | x: " + touch.position.x + ", y: " + touch.position.y + 									" | tapCount : " + touch.tapCount + 									((touch.tapCount > 1) ? " | deltaT: " + touch.deltaTime : "");								else									touchInfoStrs[i] = "[MOV] touch fId #" + touch.fingerId + 									" | x: " + touch.position.x + ", y: " + touch.position.y + 									" | tapCount : " + touch.tapCount + 									((touch.tapCount > 1) ? " | deltaT: " + touch.deltaTime : "");						}						else						{			                    touchInfoStrs[i] = "[-----] touch fId #" + touch.fingerId + 							" | x: " + touch.position.x + ", y: " + touch.position.y + 							" | tapCount : " + touch.tapCount + 							((touch.tapCount > 1) ? " | deltaT: " + touch.deltaTime : "");						}						break;					}				}			}						for (int j = Input.touchCount; j < touchInfoStrs.Length; ++j) // reset old info every frame				touchInfoStrs[j] = "";		}	}		void OnGUI ()	{        for (int i = 0; i < touchInfoStrs.Length; ++i)            GUI.Label(new Rect(150, 50 + 13 * i, Screen.width - 200, 22), touchInfoStrs[i]); 		GUI.Box(new Rect(areaCorner.x, areaCorner.y, areaSize.x, areaSize.y), "Touch Area\n\nX0, Y0\n" + areaCorner + "\nW, H\n" + areaSize);	}		bool isHitTouchArea(Touch hTouch, Vector2 aCorner, Vector2 aSize)	{		if (hTouch.position.x > aCorner.x &&			hTouch.position.x < (aCorner.x + aSize.x) &&			hTouch.position.y > (Screen.height - (aCorner.y + aSize.y)) &&			hTouch.position.y < (Screen.height - aCorner.y))			return true;		else			return false;	}}